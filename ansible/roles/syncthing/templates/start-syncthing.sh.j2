#!/bin/bash
# Syncthing startup script for WSL2 compatibility
# Generated by mesh-infra Ansible role

set -euo pipefail

SYNCTHING_CONFIG_DIR="{{ syncthing_config_dir }}"
SYNCTHING_DATA_DIR="{{ syncthing_data_dir }}"
SYNCTHING_USER="{{ syncthing_user }}"
SYNCTHING_PID_FILE="/tmp/syncthing-${SYNCTHING_USER}.pid"
SYNCTHING_LOG_FILE="${HOME}/.local/share/syncthing/syncthing.log"

# Ensure directories exist
mkdir -p "$(dirname "$SYNCTHING_LOG_FILE")"
mkdir -p "$SYNCTHING_DATA_DIR"

# Function to check if Syncthing is already running
is_syncthing_running() {
    if [ -f "$SYNCTHING_PID_FILE" ]; then
        local pid=$(cat "$SYNCTHING_PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            return 0
        else
            rm -f "$SYNCTHING_PID_FILE"
        fi
    fi
    return 1
}

# Function to start Syncthing
start_syncthing() {
    echo "Starting Syncthing for user $SYNCTHING_USER..."
    
    # Check if already running
    if is_syncthing_running; then
        echo "Syncthing is already running (PID: $(cat "$SYNCTHING_PID_FILE"))"
        return 0
    fi
    
    # Start Syncthing in background
    nohup syncthing serve \
        --no-browser \
        --no-restart \
        --logflags=0 \
        --config="$SYNCTHING_CONFIG_DIR" \
        --data="$SYNCTHING_DATA_DIR" \
        >> "$SYNCTHING_LOG_FILE" 2>&1 &
    
    local pid=$!
    echo $pid > "$SYNCTHING_PID_FILE"
    
    # Wait a moment and verify it started
    sleep 2
    if kill -0 "$pid" 2>/dev/null; then
        echo "✓ Syncthing started successfully (PID: $pid)"
        echo "✓ Web UI: http://127.0.0.1:8384"
        echo "✓ Logs: $SYNCTHING_LOG_FILE"
        return 0
    else
        echo "✗ Failed to start Syncthing"
        rm -f "$SYNCTHING_PID_FILE"
        return 1
    fi
}

# Function to stop Syncthing
stop_syncthing() {
    if is_syncthing_running; then
        local pid=$(cat "$SYNCTHING_PID_FILE")
        echo "Stopping Syncthing (PID: $pid)..."
        kill "$pid"
        rm -f "$SYNCTHING_PID_FILE"
        echo "✓ Syncthing stopped"
    else
        echo "Syncthing is not running"
    fi
}

# Function to check status
status_syncthing() {
    if is_syncthing_running; then
        local pid=$(cat "$SYNCTHING_PID_FILE")
        echo "Syncthing is running (PID: $pid)"
        
        # Try to get API status
        if command -v curl >/dev/null 2>&1; then
            echo "Checking API status..."
            if curl -s -f "http://127.0.0.1:8384/rest/system/ping" >/dev/null; then
                echo "✓ Web API is responding"
            else
                echo "⚠ Web API not responding (may still be starting)"
            fi
        fi
        return 0
    else
        echo "Syncthing is not running"
        return 1
    fi
}

# Function to restart Syncthing
restart_syncthing() {
    stop_syncthing
    sleep 1
    start_syncthing
}

# Main script logic
case "${1:-start}" in
    start)
        start_syncthing
        ;;
    stop)
        stop_syncthing
        ;;
    restart)
        restart_syncthing
        ;;
    status)
        status_syncthing
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        echo ""
        echo "Syncthing management script for WSL2"
        echo "Config: $SYNCTHING_CONFIG_DIR"
        echo "Data: $SYNCTHING_DATA_DIR"
        echo "Logs: $SYNCTHING_LOG_FILE"
        exit 1
        ;;
esac